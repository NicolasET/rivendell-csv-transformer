---

---

<script>
  import Papa from "papaparse";
  import dayjs from "../config/dayjs";

  interface InputRow {
    created_time?: string;
    "full name"?: string;
    número_de_teléfono?: string;
    correo_electrónico?: string;
    estado?: string;
    lead_status?: string;
    [key: string]: string | undefined;
  }

  interface TransformedRow {
    createdAt: string;
    name: string;
    paternalSurname: string;
    maternalSurname: string;
    phone: string;
    email: string;
    state: string;
    completed: boolean;
    origen: string;
  }

  const DEFAULT_STATE = "Ciudad de México";

  // Set of valid Mexican states for better performance
  const validMexicanStates = new Set([
    "Aguascalientes",
    "Baja California",
    "Baja California Sur",
    "Campeche",
    "Chiapas",
    "Chihuahua",
    "Ciudad de México",
    "Coahuila",
    "Colima",
    "Durango",
    "Estado de México",
    "Guanajuato",
    "Guerrero",
    "Hidalgo",
    "Jalisco",
    "Michoacán",
    "Morelos",
    "Nayarit",
    "Nuevo León",
    "Oaxaca",
    "Puebla",
    "Querétaro",
    "Quintana Roo",
    "San Luis Potosí",
    "Sinaloa",
    "Sonora",
    "Tabasco",
    "Tamaulipas",
    "Tlaxcala",
    "Veracruz",
    "Yucatán",
    "Zacatecas",
  ]);

  // Common Mexican names and surnames for better detection
  const commonNames = new Set([
    "maría",
    "jose",
    "juan",
    "ana",
    "luis",
    "carlos",
    "francisco",
    "antonio",
    "jesús",
    "alejandro",
    "miguel",
    "manuel",
    "rafael",
    "pedro",
    "daniel",
    "fernando",
    "jorge",
    "roberto",
    "ricardo",
    "eduardo",
    "alberto",
    "sergio",
    "raúl",
    "oscar",
    "enrique",
    "gerardo",
    "arturo",
    "marco",
    "diego",
    "rodrigo",
    "alfredo",
    "irene",
    "guadalupe",
    "alan",
    "azael",
    "manolo",
    "abel",
    "valentina",
    "kim",
  ]);

  const commonSurnameParticles = new Set([
    "de",
    "del",
    "la",
    "las",
    "los",
    "da",
    "das",
    "do",
    "dos",
  ]);

  let transformedCSV = "";

  function separateFullName(fullName?: string): {
    name: string;
    paternalSurname: string;
    maternalSurname: string;
  } {
    if (!fullName) {
      return { name: "", paternalSurname: "", maternalSurname: "" };
    }

    // Clean and normalize the name
    const cleanName = fullName
      .trim()
      .replace(/\s+/g, " ") // Remove extra spaces
      .toLowerCase();

    const parts = cleanName.split(" ");

    if (parts.length === 0) {
      return { name: "", paternalSurname: "", maternalSurname: "" };
    }

    // Helper function to capitalize first letter
    const capitalize = (str: string) =>
      str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();

    if (parts.length === 1) {
      // Only one word - treat as first name
      return {
        name: capitalize(parts[0]),
        paternalSurname: "",
        maternalSurname: "",
      };
    }

    if (parts.length === 2) {
      // Two words - first name + paternal surname
      return {
        name: capitalize(parts[0]),
        paternalSurname: capitalize(parts[1]),
        maternalSurname: "",
      };
    }

    // For 3 or more parts
    let nameEndIndex = 0;

    // Strategy 1: Look for compound first names (María + another name)
    if (parts[0] === "maría" && parts.length >= 3) {
      // María + second name is likely the full first name
      nameEndIndex = 1;
    }
    // Strategy 2: Look for compound first names (Juan Carlos, etc.)
    else if (
      commonNames.has(parts[0]) &&
      commonNames.has(parts[1]) &&
      parts.length >= 4
    ) {
      nameEndIndex = 1;
    }
    // Strategy 3: Check if second word is also a common first name
    else if (
      commonNames.has(parts[1]) &&
      !isLikelySurname(parts[1]) &&
      parts.length >= 4
    ) {
      nameEndIndex = 1;
    }
    // Default: first word is the name
    else {
      nameEndIndex = 0;
    }

    // Extract name(s)
    const names = parts.slice(0, nameEndIndex + 1);
    const remainingParts = parts.slice(nameEndIndex + 1);

    if (remainingParts.length === 0) {
      return {
        name: names.map(capitalize).join(" "),
        paternalSurname: "",
        maternalSurname: "",
      };
    }

    if (remainingParts.length === 1) {
      return {
        name: names.map(capitalize).join(" "),
        paternalSurname: capitalize(remainingParts[0]),
        maternalSurname: "",
      };
    }

    // Handle surname particles (de, del, etc.)
    let paternalSurnameEnd = 0;

    // Look for surname particles to group with the surname
    for (let i = 0; i < remainingParts.length - 1; i++) {
      if (commonSurnameParticles.has(remainingParts[i])) {
        paternalSurnameEnd = i + 1; // Include the particle and next word
        break;
      }
    }

    // If no particles found, assume first remaining word is paternal surname
    if (paternalSurnameEnd === 0) {
      paternalSurnameEnd = 0;
    }

    const paternalSurnameParts = remainingParts.slice(
      0,
      paternalSurnameEnd + 1
    );
    const maternalSurnameParts = remainingParts.slice(paternalSurnameEnd + 1);

    return {
      name: names.map(capitalize).join(" "),
      paternalSurname: paternalSurnameParts.map(capitalize).join(" "),
      maternalSurname: maternalSurnameParts.map(capitalize).join(" "),
    };
  }

  function isLikelySurname(word: string): boolean {
    const commonSurnames = new Set([
      "gonzález",
      "rodríguez",
      "garcía",
      "martínez",
      "lópez",
      "hernández",
      "pérez",
      "sánchez",
      "ramírez",
      "torres",
      "flores",
      "rivera",
      "gómez",
      "díaz",
      "cruz",
      "morales",
      "ortega",
      "esquivel",
      "león",
      "vázquez",
      "alcalá",
      "novelo",
      "barragan",
      "benítez",
      "ordoñez",
      "nava",
      "sabas",
      "morgan",
      "andrade",
      "gorab",
      "metri",
    ]);

    return commonSurnames.has(word.toLowerCase());
  }

  function formatPhone(phone?: string): string {
    if (!phone) return "";

    // Remove all non-digit characters
    const digits = phone.replace(/\D/g, "");

    // Check if it starts with 52 (Mexico country code)
    if (digits.startsWith("52") && digits.length === 12) {
      // Remove the country code and return the 10-digit number
      return digits.substring(2);
    }

    // If it doesn't match Mexican format, return empty
    return "";
  }

  function formatDate(dateStr?: string): string {
    if (!dateStr) return "";

    // Try to parse the date with dayjs
    const date = dayjs(dateStr);

    // Check if the date is valid
    if (!date.isValid()) return "";

    return date.tz().format("YYYY-MM-DD");
  }

  function normalizeState(estado?: string): string {
    if (!estado) return DEFAULT_STATE;

    const inputState = estado.trim();

    // First, try exact match (case-insensitive)
    for (const state of validMexicanStates) {
      if (state.toLowerCase() === inputState.toLowerCase()) {
        return state;
      }
    }

    // Try partial match (fuzzy matching)
    for (const state of validMexicanStates) {
      const stateWords = state.toLowerCase().split(/\s+/);
      const inputWords = inputState.toLowerCase().split(/\s+/);

      // Check if any word from input matches any word from state name
      const hasMatch = inputWords.some((inputWord) =>
        stateWords.some(
          (stateWord) =>
            stateWord.includes(inputWord) || inputWord.includes(stateWord)
        )
      );

      if (hasMatch) {
        return state;
      }
    }

    // Try removing accents and special characters for better matching
    const normalizeText = (text: string) =>
      text
        .toLowerCase()
        .normalize("NFD")
        .replace(/[\u0300-\u036f]/g, "") // Remove accents
        .replace(/[^a-z\s]/g, ""); // Remove special characters

    const normalizedInput = normalizeText(inputState);

    for (const state of validMexicanStates) {
      const normalizedState = normalizeText(state);

      if (
        normalizedState.includes(normalizedInput) ||
        normalizedInput.includes(normalizedState)
      ) {
        return state;
      }
    }

    // If no match found, return default state
    return DEFAULT_STATE;
  }

  function transformData(data: InputRow[]): TransformedRow[] {
    return data
      .filter((row: InputRow) =>
        Object.values(row).some((val) => val && val.trim())
      ) // Remove empty rows
      .map((row: InputRow): TransformedRow => {
        const { name, paternalSurname, maternalSurname } = separateFullName(
          row["full name"]
        );

        return {
          createdAt: formatDate(row["created_time"]),
          name,
          paternalSurname,
          maternalSurname,
          phone: formatPhone(row["número_de_teléfono"]),
          email: row["correo_electrónico"] || "",
          state: normalizeState(row["estado"]),
          completed: row["lead_status"]?.toLowerCase() === "complete",
          origen: "Meta",
        };
      });
  }

  document
    .getElementById("fileInput")
    ?.addEventListener("change", function (e: Event) {
      const target = e.target as HTMLInputElement;
      const file = target.files?.[0];
      if (!file) return;

      Papa.parse(file, {
        header: true,
        complete: function (results: any) {
          const transformed = transformData(results.data as InputRow[]);
          transformedCSV = Papa.unparse(transformed, {
            header: true,
          });
          alert("CSV procesado con éxito. Haga clic en 'Descargar target.csv'");
        },
        error: function (err: any) {
          alert("Error al analizar CSV: " + err.message);
        },
      });
    });

  function downloadCSV() {
    if (!transformedCSV) {
      alert("No se ha procesado ningún archivo.");
      return;
    }
    const blob = new Blob([transformedCSV], {
      type: "text/csv;charset=utf-8;",
    });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = "target.csv";
    link.setAttribute("charset", "utf-8");

    // UTF-8 encoding with accents
    const bomBlob = new Blob(["\uFEFF" + transformedCSV], {
      type: "text/csv;charset=utf-8;",
    });
    link.href = URL.createObjectURL(bomBlob);
    link.click();
  }

  document
    .getElementById("downloadBtn")
    ?.addEventListener("click", downloadCSV);
</script>

<html lang="es">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Rivendell CSV Transformer</title>
  </head>
  <body>
    <h2>Subir archivo META</h2>
    <input type="file" id="fileInput" accept=".csv" />
    <button id="downloadBtn">Descargar Rivendell.csv</button>
  </body>
</html>
